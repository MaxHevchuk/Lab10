# 2. Сформувати функцію для обчислення цифрового кореню натурального числа. Цифровий корінь отримується наступним чином:
# необхідно скласти всі цифри заданого числа, потім скласти всі цифри знайденої суми і повторювати процес до тих пір,
# поки сума не буде дорівнювати однозначному числу, що і буде цифровим коренем заданого числа.
# Гевчук Максим КН-А

import timeit


# from memory_profiler import profile


# @profile
def recursion(n):
    """if n < 10:
        return n
    else:
        return recursion(sum(map(int, str(n))))"""

    # якщо число складається з двох або більше цифр, то воно розкладається на масив із цих цифр з типом str, потім кожне
    # число переводиться в int, підсумовується та передається у ту ж саму функцію як новий аргумент (рекурсія).
    return n if n < 10 else recursion(sum(map(int, str(n))))


# @profile
def iteration(n):
    # теж саме тільки з використанням ітерації.
    while n >= 10:
        n = sum(map(int, str(n)))
    return n


# число буде запитуватись доки не буде введене натуральне
while True:
    try:
        num = int(input('Введіть число n:\n>>> '))
        if num > 0:
            break
        print('Введіть натуральне число!')
    except ValueError:
        print('Введіть натуральне число!')

# виведення
print(f'\nЦифровий корінь числа {num}, добутий функцією рекурсії: {recursion(num)}')
print(f'Цифровий корінь числа {num}, добутий функцією ітерації: {iteration(num)}')
print(f"\nЗатрачений час на рекурсію: "
      f" {timeit.timeit('recursion(num)', setup='from __main__ import recursion, num', number=1)}")
print(f"Затрачений час на ітерацію: "
      f" {timeit.timeit('iteration(num)', setup='from __main__ import iteration, num', number=1)}")

# В усіх функціях обсяг використаної пам'яті варіюється від 13.3 до 13.9 МіВ
# Час розробки рекурсії переважає за час розробки ітерації
# Час виконання ітерації майже удвоє менше за час виконааня рекурсії
# Отож у даному варіанті варто використовувати ітерацію, тому що читабельність в обох випадках однакова, а різниця
# швидкостей має значення
